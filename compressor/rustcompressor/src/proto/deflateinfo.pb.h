// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deflateinfo.proto

#ifndef PROTOBUF_INCLUDED_deflateinfo_2eproto
#define PROTOBUF_INCLUDED_deflateinfo_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_deflateinfo_2eproto 

namespace protobuf_deflateinfo_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[11];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_deflateinfo_2eproto
class Backref;
class BackrefDefaultTypeInternal;
extern BackrefDefaultTypeInternal _Backref_default_instance_;
class CompressedBlock;
class CompressedBlockDefaultTypeInternal;
extern CompressedBlockDefaultTypeInternal _CompressedBlock_default_instance_;
class CompressedBlock_DistCodelenEntry_DoNotUse;
class CompressedBlock_DistCodelenEntry_DoNotUseDefaultTypeInternal;
extern CompressedBlock_DistCodelenEntry_DoNotUseDefaultTypeInternal _CompressedBlock_DistCodelenEntry_DoNotUse_default_instance_;
class CompressedBlock_LenlitCodelenEntry_DoNotUse;
class CompressedBlock_LenlitCodelenEntry_DoNotUseDefaultTypeInternal;
extern CompressedBlock_LenlitCodelenEntry_DoNotUseDefaultTypeInternal _CompressedBlock_LenlitCodelenEntry_DoNotUse_default_instance_;
class DEFLATEBlock;
class DEFLATEBlockDefaultTypeInternal;
extern DEFLATEBlockDefaultTypeInternal _DEFLATEBlock_default_instance_;
class DEFLATEStream;
class DEFLATEStreamDefaultTypeInternal;
extern DEFLATEStreamDefaultTypeInternal _DEFLATEStream_default_instance_;
class DeflateSym;
class DeflateSymDefaultTypeInternal;
extern DeflateSymDefaultTypeInternal _DeflateSym_default_instance_;
class Literal;
class LiteralDefaultTypeInternal;
extern LiteralDefaultTypeInternal _Literal_default_instance_;
class OffsetBackref;
class OffsetBackrefDefaultTypeInternal;
extern OffsetBackrefDefaultTypeInternal _OffsetBackref_default_instance_;
class UncompressedBlock;
class UncompressedBlockDefaultTypeInternal;
extern UncompressedBlockDefaultTypeInternal _UncompressedBlock_default_instance_;
class UnderlyingBlock;
class UnderlyingBlockDefaultTypeInternal;
extern UnderlyingBlockDefaultTypeInternal _UnderlyingBlock_default_instance_;
namespace google {
namespace protobuf {
template<> ::Backref* Arena::CreateMaybeMessage<::Backref>(Arena*);
template<> ::CompressedBlock* Arena::CreateMaybeMessage<::CompressedBlock>(Arena*);
template<> ::CompressedBlock_DistCodelenEntry_DoNotUse* Arena::CreateMaybeMessage<::CompressedBlock_DistCodelenEntry_DoNotUse>(Arena*);
template<> ::CompressedBlock_LenlitCodelenEntry_DoNotUse* Arena::CreateMaybeMessage<::CompressedBlock_LenlitCodelenEntry_DoNotUse>(Arena*);
template<> ::DEFLATEBlock* Arena::CreateMaybeMessage<::DEFLATEBlock>(Arena*);
template<> ::DEFLATEStream* Arena::CreateMaybeMessage<::DEFLATEStream>(Arena*);
template<> ::DeflateSym* Arena::CreateMaybeMessage<::DeflateSym>(Arena*);
template<> ::Literal* Arena::CreateMaybeMessage<::Literal>(Arena*);
template<> ::OffsetBackref* Arena::CreateMaybeMessage<::OffsetBackref>(Arena*);
template<> ::UncompressedBlock* Arena::CreateMaybeMessage<::UncompressedBlock>(Arena*);
template<> ::UnderlyingBlock* Arena::CreateMaybeMessage<::UnderlyingBlock>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class Literal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Literal) */ {
 public:
  Literal();
  virtual ~Literal();

  Literal(const Literal& from);

  inline Literal& operator=(const Literal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Literal(Literal&& from) noexcept
    : Literal() {
    *this = ::std::move(from);
  }

  inline Literal& operator=(Literal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Literal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Literal* internal_default_instance() {
    return reinterpret_cast<const Literal*>(
               &_Literal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Literal* other);
  friend void swap(Literal& a, Literal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Literal* New() const final {
    return CreateMaybeMessage<Literal>(NULL);
  }

  Literal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Literal>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Literal& from);
  void MergeFrom(const Literal& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Literal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::uint32 value() const;
  void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Literal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_deflateinfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Backref : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Backref) */ {
 public:
  Backref();
  virtual ~Backref();

  Backref(const Backref& from);

  inline Backref& operator=(const Backref& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Backref(Backref&& from) noexcept
    : Backref() {
    *this = ::std::move(from);
  }

  inline Backref& operator=(Backref&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Backref& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Backref* internal_default_instance() {
    return reinterpret_cast<const Backref*>(
               &_Backref_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Backref* other);
  friend void swap(Backref& a, Backref& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Backref* New() const final {
    return CreateMaybeMessage<Backref>(NULL);
  }

  Backref* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Backref>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Backref& from);
  void MergeFrom(const Backref& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Backref* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 length = 1;
  void clear_length();
  static const int kLengthFieldNumber = 1;
  ::google::protobuf::uint32 length() const;
  void set_length(::google::protobuf::uint32 value);

  // uint32 distance = 2;
  void clear_distance();
  static const int kDistanceFieldNumber = 2;
  ::google::protobuf::uint32 distance() const;
  void set_distance(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Backref)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 length_;
  ::google::protobuf::uint32 distance_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_deflateinfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OffsetBackref : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:OffsetBackref) */ {
 public:
  OffsetBackref();
  virtual ~OffsetBackref();

  OffsetBackref(const OffsetBackref& from);

  inline OffsetBackref& operator=(const OffsetBackref& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OffsetBackref(OffsetBackref&& from) noexcept
    : OffsetBackref() {
    *this = ::std::move(from);
  }

  inline OffsetBackref& operator=(OffsetBackref&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OffsetBackref& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OffsetBackref* internal_default_instance() {
    return reinterpret_cast<const OffsetBackref*>(
               &_OffsetBackref_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(OffsetBackref* other);
  friend void swap(OffsetBackref& a, OffsetBackref& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OffsetBackref* New() const final {
    return CreateMaybeMessage<OffsetBackref>(NULL);
  }

  OffsetBackref* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OffsetBackref>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OffsetBackref& from);
  void MergeFrom(const OffsetBackref& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OffsetBackref* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 offset = 1;
  void clear_offset();
  static const int kOffsetFieldNumber = 1;
  ::google::protobuf::uint32 offset() const;
  void set_offset(::google::protobuf::uint32 value);

  // uint32 length = 2;
  void clear_length();
  static const int kLengthFieldNumber = 2;
  ::google::protobuf::uint32 length() const;
  void set_length(::google::protobuf::uint32 value);

  // uint32 distance = 3;
  void clear_distance();
  static const int kDistanceFieldNumber = 3;
  ::google::protobuf::uint32 distance() const;
  void set_distance(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:OffsetBackref)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 length_;
  ::google::protobuf::uint32 distance_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_deflateinfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeflateSym : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DeflateSym) */ {
 public:
  DeflateSym();
  virtual ~DeflateSym();

  DeflateSym(const DeflateSym& from);

  inline DeflateSym& operator=(const DeflateSym& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeflateSym(DeflateSym&& from) noexcept
    : DeflateSym() {
    *this = ::std::move(from);
  }

  inline DeflateSym& operator=(DeflateSym&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeflateSym& default_instance();

  enum SymCase {
    kLit = 1,
    kBackref = 2,
    kOffset = 3,
    SYM_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeflateSym* internal_default_instance() {
    return reinterpret_cast<const DeflateSym*>(
               &_DeflateSym_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(DeflateSym* other);
  friend void swap(DeflateSym& a, DeflateSym& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeflateSym* New() const final {
    return CreateMaybeMessage<DeflateSym>(NULL);
  }

  DeflateSym* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeflateSym>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeflateSym& from);
  void MergeFrom(const DeflateSym& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeflateSym* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Literal lit = 1;
  bool has_lit() const;
  void clear_lit();
  static const int kLitFieldNumber = 1;
  private:
  const ::Literal& _internal_lit() const;
  public:
  const ::Literal& lit() const;
  ::Literal* release_lit();
  ::Literal* mutable_lit();
  void set_allocated_lit(::Literal* lit);

  // .Backref backref = 2;
  bool has_backref() const;
  void clear_backref();
  static const int kBackrefFieldNumber = 2;
  private:
  const ::Backref& _internal_backref() const;
  public:
  const ::Backref& backref() const;
  ::Backref* release_backref();
  ::Backref* mutable_backref();
  void set_allocated_backref(::Backref* backref);

  // .OffsetBackref offset = 3;
  bool has_offset() const;
  void clear_offset();
  static const int kOffsetFieldNumber = 3;
  private:
  const ::OffsetBackref& _internal_offset() const;
  public:
  const ::OffsetBackref& offset() const;
  ::OffsetBackref* release_offset();
  ::OffsetBackref* mutable_offset();
  void set_allocated_offset(::OffsetBackref* offset);

  void clear_sym();
  SymCase sym_case() const;
  // @@protoc_insertion_point(class_scope:DeflateSym)
 private:
  void set_has_lit();
  void set_has_backref();
  void set_has_offset();

  inline bool has_sym() const;
  inline void clear_has_sym();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union SymUnion {
    SymUnion() {}
    ::Literal* lit_;
    ::Backref* backref_;
    ::OffsetBackref* offset_;
  } sym_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_deflateinfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UncompressedBlock : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UncompressedBlock) */ {
 public:
  UncompressedBlock();
  virtual ~UncompressedBlock();

  UncompressedBlock(const UncompressedBlock& from);

  inline UncompressedBlock& operator=(const UncompressedBlock& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UncompressedBlock(UncompressedBlock&& from) noexcept
    : UncompressedBlock() {
    *this = ::std::move(from);
  }

  inline UncompressedBlock& operator=(UncompressedBlock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UncompressedBlock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UncompressedBlock* internal_default_instance() {
    return reinterpret_cast<const UncompressedBlock*>(
               &_UncompressedBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(UncompressedBlock* other);
  friend void swap(UncompressedBlock& a, UncompressedBlock& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UncompressedBlock* New() const final {
    return CreateMaybeMessage<UncompressedBlock>(NULL);
  }

  UncompressedBlock* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UncompressedBlock>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UncompressedBlock& from);
  void MergeFrom(const UncompressedBlock& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UncompressedBlock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:UncompressedBlock)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_deflateinfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CompressedBlock_LenlitCodelenEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<CompressedBlock_LenlitCodelenEntry_DoNotUse, 
    ::google::protobuf::uint32, ::google::protobuf::uint32,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<CompressedBlock_LenlitCodelenEntry_DoNotUse, 
    ::google::protobuf::uint32, ::google::protobuf::uint32,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    0 > SuperType;
  CompressedBlock_LenlitCodelenEntry_DoNotUse();
  CompressedBlock_LenlitCodelenEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const CompressedBlock_LenlitCodelenEntry_DoNotUse& other);
  static const CompressedBlock_LenlitCodelenEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CompressedBlock_LenlitCodelenEntry_DoNotUse*>(&_CompressedBlock_LenlitCodelenEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class CompressedBlock_DistCodelenEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<CompressedBlock_DistCodelenEntry_DoNotUse, 
    ::google::protobuf::uint32, ::google::protobuf::uint32,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<CompressedBlock_DistCodelenEntry_DoNotUse, 
    ::google::protobuf::uint32, ::google::protobuf::uint32,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    0 > SuperType;
  CompressedBlock_DistCodelenEntry_DoNotUse();
  CompressedBlock_DistCodelenEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const CompressedBlock_DistCodelenEntry_DoNotUse& other);
  static const CompressedBlock_DistCodelenEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CompressedBlock_DistCodelenEntry_DoNotUse*>(&_CompressedBlock_DistCodelenEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class CompressedBlock : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CompressedBlock) */ {
 public:
  CompressedBlock();
  virtual ~CompressedBlock();

  CompressedBlock(const CompressedBlock& from);

  inline CompressedBlock& operator=(const CompressedBlock& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CompressedBlock(CompressedBlock&& from) noexcept
    : CompressedBlock() {
    *this = ::std::move(from);
  }

  inline CompressedBlock& operator=(CompressedBlock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CompressedBlock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompressedBlock* internal_default_instance() {
    return reinterpret_cast<const CompressedBlock*>(
               &_CompressedBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CompressedBlock* other);
  friend void swap(CompressedBlock& a, CompressedBlock& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CompressedBlock* New() const final {
    return CreateMaybeMessage<CompressedBlock>(NULL);
  }

  CompressedBlock* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CompressedBlock>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CompressedBlock& from);
  void MergeFrom(const CompressedBlock& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompressedBlock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .DeflateSym data = 1;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  ::DeflateSym* mutable_data(int index);
  ::google::protobuf::RepeatedPtrField< ::DeflateSym >*
      mutable_data();
  const ::DeflateSym& data(int index) const;
  ::DeflateSym* add_data();
  const ::google::protobuf::RepeatedPtrField< ::DeflateSym >&
      data() const;

  // map<uint32, uint32> lenlit_codelen = 3;
  int lenlit_codelen_size() const;
  void clear_lenlit_codelen();
  static const int kLenlitCodelenFieldNumber = 3;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
      lenlit_codelen() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
      mutable_lenlit_codelen();

  // map<uint32, uint32> dist_codelen = 4;
  int dist_codelen_size() const;
  void clear_dist_codelen();
  static const int kDistCodelenFieldNumber = 4;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
      dist_codelen() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
      mutable_dist_codelen();

  // @@protoc_insertion_point(class_scope:CompressedBlock)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::DeflateSym > data_;
  ::google::protobuf::internal::MapField<
      CompressedBlock_LenlitCodelenEntry_DoNotUse,
      ::google::protobuf::uint32, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > lenlit_codelen_;
  ::google::protobuf::internal::MapField<
      CompressedBlock_DistCodelenEntry_DoNotUse,
      ::google::protobuf::uint32, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > dist_codelen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_deflateinfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UnderlyingBlock : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UnderlyingBlock) */ {
 public:
  UnderlyingBlock();
  virtual ~UnderlyingBlock();

  UnderlyingBlock(const UnderlyingBlock& from);

  inline UnderlyingBlock& operator=(const UnderlyingBlock& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnderlyingBlock(UnderlyingBlock&& from) noexcept
    : UnderlyingBlock() {
    *this = ::std::move(from);
  }

  inline UnderlyingBlock& operator=(UnderlyingBlock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnderlyingBlock& default_instance();

  enum DataCase {
    kRaw = 10,
    kBlock = 1,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnderlyingBlock* internal_default_instance() {
    return reinterpret_cast<const UnderlyingBlock*>(
               &_UnderlyingBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(UnderlyingBlock* other);
  friend void swap(UnderlyingBlock& a, UnderlyingBlock& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnderlyingBlock* New() const final {
    return CreateMaybeMessage<UnderlyingBlock>(NULL);
  }

  UnderlyingBlock* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UnderlyingBlock>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UnderlyingBlock& from);
  void MergeFrom(const UnderlyingBlock& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnderlyingBlock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .UncompressedBlock raw = 10;
  bool has_raw() const;
  void clear_raw();
  static const int kRawFieldNumber = 10;
  private:
  const ::UncompressedBlock& _internal_raw() const;
  public:
  const ::UncompressedBlock& raw() const;
  ::UncompressedBlock* release_raw();
  ::UncompressedBlock* mutable_raw();
  void set_allocated_raw(::UncompressedBlock* raw);

  // .CompressedBlock block = 1;
  bool has_block() const;
  void clear_block();
  static const int kBlockFieldNumber = 1;
  private:
  const ::CompressedBlock& _internal_block() const;
  public:
  const ::CompressedBlock& block() const;
  ::CompressedBlock* release_block();
  ::CompressedBlock* mutable_block();
  void set_allocated_block(::CompressedBlock* block);

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:UnderlyingBlock)
 private:
  void set_has_raw();
  void set_has_block();

  inline bool has_data() const;
  inline void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union DataUnion {
    DataUnion() {}
    ::UncompressedBlock* raw_;
    ::CompressedBlock* block_;
  } data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_deflateinfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DEFLATEBlock : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DEFLATEBlock) */ {
 public:
  DEFLATEBlock();
  virtual ~DEFLATEBlock();

  DEFLATEBlock(const DEFLATEBlock& from);

  inline DEFLATEBlock& operator=(const DEFLATEBlock& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DEFLATEBlock(DEFLATEBlock&& from) noexcept
    : DEFLATEBlock() {
    *this = ::std::move(from);
  }

  inline DEFLATEBlock& operator=(DEFLATEBlock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DEFLATEBlock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DEFLATEBlock* internal_default_instance() {
    return reinterpret_cast<const DEFLATEBlock*>(
               &_DEFLATEBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(DEFLATEBlock* other);
  friend void swap(DEFLATEBlock& a, DEFLATEBlock& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DEFLATEBlock* New() const final {
    return CreateMaybeMessage<DEFLATEBlock>(NULL);
  }

  DEFLATEBlock* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DEFLATEBlock>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DEFLATEBlock& from);
  void MergeFrom(const DEFLATEBlock& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DEFLATEBlock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .UnderlyingBlock data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  private:
  const ::UnderlyingBlock& _internal_data() const;
  public:
  const ::UnderlyingBlock& data() const;
  ::UnderlyingBlock* release_data();
  ::UnderlyingBlock* mutable_data();
  void set_allocated_data(::UnderlyingBlock* data);

  // bool final = 1;
  void clear_final();
  static const int kFinalFieldNumber = 1;
  bool final() const;
  void set_final(bool value);

  // @@protoc_insertion_point(class_scope:DEFLATEBlock)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::UnderlyingBlock* data_;
  bool final_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_deflateinfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DEFLATEStream : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DEFLATEStream) */ {
 public:
  DEFLATEStream();
  virtual ~DEFLATEStream();

  DEFLATEStream(const DEFLATEStream& from);

  inline DEFLATEStream& operator=(const DEFLATEStream& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DEFLATEStream(DEFLATEStream&& from) noexcept
    : DEFLATEStream() {
    *this = ::std::move(from);
  }

  inline DEFLATEStream& operator=(DEFLATEStream&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DEFLATEStream& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DEFLATEStream* internal_default_instance() {
    return reinterpret_cast<const DEFLATEStream*>(
               &_DEFLATEStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(DEFLATEStream* other);
  friend void swap(DEFLATEStream& a, DEFLATEStream& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DEFLATEStream* New() const final {
    return CreateMaybeMessage<DEFLATEStream>(NULL);
  }

  DEFLATEStream* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DEFLATEStream>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DEFLATEStream& from);
  void MergeFrom(const DEFLATEStream& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DEFLATEStream* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .DEFLATEBlock blocks = 1;
  int blocks_size() const;
  void clear_blocks();
  static const int kBlocksFieldNumber = 1;
  ::DEFLATEBlock* mutable_blocks(int index);
  ::google::protobuf::RepeatedPtrField< ::DEFLATEBlock >*
      mutable_blocks();
  const ::DEFLATEBlock& blocks(int index) const;
  ::DEFLATEBlock* add_blocks();
  const ::google::protobuf::RepeatedPtrField< ::DEFLATEBlock >&
      blocks() const;

  // @@protoc_insertion_point(class_scope:DEFLATEStream)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::DEFLATEBlock > blocks_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_deflateinfo_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Literal

// uint32 value = 1;
inline void Literal::clear_value() {
  value_ = 0u;
}
inline ::google::protobuf::uint32 Literal::value() const {
  // @@protoc_insertion_point(field_get:Literal.value)
  return value_;
}
inline void Literal::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Literal.value)
}

// -------------------------------------------------------------------

// Backref

// uint32 length = 1;
inline void Backref::clear_length() {
  length_ = 0u;
}
inline ::google::protobuf::uint32 Backref::length() const {
  // @@protoc_insertion_point(field_get:Backref.length)
  return length_;
}
inline void Backref::set_length(::google::protobuf::uint32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:Backref.length)
}

// uint32 distance = 2;
inline void Backref::clear_distance() {
  distance_ = 0u;
}
inline ::google::protobuf::uint32 Backref::distance() const {
  // @@protoc_insertion_point(field_get:Backref.distance)
  return distance_;
}
inline void Backref::set_distance(::google::protobuf::uint32 value) {
  
  distance_ = value;
  // @@protoc_insertion_point(field_set:Backref.distance)
}

// -------------------------------------------------------------------

// OffsetBackref

// uint32 offset = 1;
inline void OffsetBackref::clear_offset() {
  offset_ = 0u;
}
inline ::google::protobuf::uint32 OffsetBackref::offset() const {
  // @@protoc_insertion_point(field_get:OffsetBackref.offset)
  return offset_;
}
inline void OffsetBackref::set_offset(::google::protobuf::uint32 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:OffsetBackref.offset)
}

// uint32 length = 2;
inline void OffsetBackref::clear_length() {
  length_ = 0u;
}
inline ::google::protobuf::uint32 OffsetBackref::length() const {
  // @@protoc_insertion_point(field_get:OffsetBackref.length)
  return length_;
}
inline void OffsetBackref::set_length(::google::protobuf::uint32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:OffsetBackref.length)
}

// uint32 distance = 3;
inline void OffsetBackref::clear_distance() {
  distance_ = 0u;
}
inline ::google::protobuf::uint32 OffsetBackref::distance() const {
  // @@protoc_insertion_point(field_get:OffsetBackref.distance)
  return distance_;
}
inline void OffsetBackref::set_distance(::google::protobuf::uint32 value) {
  
  distance_ = value;
  // @@protoc_insertion_point(field_set:OffsetBackref.distance)
}

// -------------------------------------------------------------------

// DeflateSym

// .Literal lit = 1;
inline bool DeflateSym::has_lit() const {
  return sym_case() == kLit;
}
inline void DeflateSym::set_has_lit() {
  _oneof_case_[0] = kLit;
}
inline void DeflateSym::clear_lit() {
  if (has_lit()) {
    delete sym_.lit_;
    clear_has_sym();
  }
}
inline const ::Literal& DeflateSym::_internal_lit() const {
  return *sym_.lit_;
}
inline ::Literal* DeflateSym::release_lit() {
  // @@protoc_insertion_point(field_release:DeflateSym.lit)
  if (has_lit()) {
    clear_has_sym();
      ::Literal* temp = sym_.lit_;
    sym_.lit_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::Literal& DeflateSym::lit() const {
  // @@protoc_insertion_point(field_get:DeflateSym.lit)
  return has_lit()
      ? *sym_.lit_
      : *reinterpret_cast< ::Literal*>(&::_Literal_default_instance_);
}
inline ::Literal* DeflateSym::mutable_lit() {
  if (!has_lit()) {
    clear_sym();
    set_has_lit();
    sym_.lit_ = CreateMaybeMessage< ::Literal >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DeflateSym.lit)
  return sym_.lit_;
}

// .Backref backref = 2;
inline bool DeflateSym::has_backref() const {
  return sym_case() == kBackref;
}
inline void DeflateSym::set_has_backref() {
  _oneof_case_[0] = kBackref;
}
inline void DeflateSym::clear_backref() {
  if (has_backref()) {
    delete sym_.backref_;
    clear_has_sym();
  }
}
inline const ::Backref& DeflateSym::_internal_backref() const {
  return *sym_.backref_;
}
inline ::Backref* DeflateSym::release_backref() {
  // @@protoc_insertion_point(field_release:DeflateSym.backref)
  if (has_backref()) {
    clear_has_sym();
      ::Backref* temp = sym_.backref_;
    sym_.backref_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::Backref& DeflateSym::backref() const {
  // @@protoc_insertion_point(field_get:DeflateSym.backref)
  return has_backref()
      ? *sym_.backref_
      : *reinterpret_cast< ::Backref*>(&::_Backref_default_instance_);
}
inline ::Backref* DeflateSym::mutable_backref() {
  if (!has_backref()) {
    clear_sym();
    set_has_backref();
    sym_.backref_ = CreateMaybeMessage< ::Backref >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DeflateSym.backref)
  return sym_.backref_;
}

// .OffsetBackref offset = 3;
inline bool DeflateSym::has_offset() const {
  return sym_case() == kOffset;
}
inline void DeflateSym::set_has_offset() {
  _oneof_case_[0] = kOffset;
}
inline void DeflateSym::clear_offset() {
  if (has_offset()) {
    delete sym_.offset_;
    clear_has_sym();
  }
}
inline const ::OffsetBackref& DeflateSym::_internal_offset() const {
  return *sym_.offset_;
}
inline ::OffsetBackref* DeflateSym::release_offset() {
  // @@protoc_insertion_point(field_release:DeflateSym.offset)
  if (has_offset()) {
    clear_has_sym();
      ::OffsetBackref* temp = sym_.offset_;
    sym_.offset_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::OffsetBackref& DeflateSym::offset() const {
  // @@protoc_insertion_point(field_get:DeflateSym.offset)
  return has_offset()
      ? *sym_.offset_
      : *reinterpret_cast< ::OffsetBackref*>(&::_OffsetBackref_default_instance_);
}
inline ::OffsetBackref* DeflateSym::mutable_offset() {
  if (!has_offset()) {
    clear_sym();
    set_has_offset();
    sym_.offset_ = CreateMaybeMessage< ::OffsetBackref >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DeflateSym.offset)
  return sym_.offset_;
}

inline bool DeflateSym::has_sym() const {
  return sym_case() != SYM_NOT_SET;
}
inline void DeflateSym::clear_has_sym() {
  _oneof_case_[0] = SYM_NOT_SET;
}
inline DeflateSym::SymCase DeflateSym::sym_case() const {
  return DeflateSym::SymCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// UncompressedBlock

// bytes data = 1;
inline void UncompressedBlock::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UncompressedBlock::data() const {
  // @@protoc_insertion_point(field_get:UncompressedBlock.data)
  return data_.GetNoArena();
}
inline void UncompressedBlock::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UncompressedBlock.data)
}
#if LANG_CXX11
inline void UncompressedBlock::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UncompressedBlock.data)
}
#endif
inline void UncompressedBlock::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UncompressedBlock.data)
}
inline void UncompressedBlock::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UncompressedBlock.data)
}
inline ::std::string* UncompressedBlock::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:UncompressedBlock.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UncompressedBlock::release_data() {
  // @@protoc_insertion_point(field_release:UncompressedBlock.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UncompressedBlock::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:UncompressedBlock.data)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CompressedBlock

// map<uint32, uint32> lenlit_codelen = 3;
inline int CompressedBlock::lenlit_codelen_size() const {
  return lenlit_codelen_.size();
}
inline void CompressedBlock::clear_lenlit_codelen() {
  lenlit_codelen_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
CompressedBlock::lenlit_codelen() const {
  // @@protoc_insertion_point(field_map:CompressedBlock.lenlit_codelen)
  return lenlit_codelen_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
CompressedBlock::mutable_lenlit_codelen() {
  // @@protoc_insertion_point(field_mutable_map:CompressedBlock.lenlit_codelen)
  return lenlit_codelen_.MutableMap();
}

// map<uint32, uint32> dist_codelen = 4;
inline int CompressedBlock::dist_codelen_size() const {
  return dist_codelen_.size();
}
inline void CompressedBlock::clear_dist_codelen() {
  dist_codelen_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
CompressedBlock::dist_codelen() const {
  // @@protoc_insertion_point(field_map:CompressedBlock.dist_codelen)
  return dist_codelen_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
CompressedBlock::mutable_dist_codelen() {
  // @@protoc_insertion_point(field_mutable_map:CompressedBlock.dist_codelen)
  return dist_codelen_.MutableMap();
}

// repeated .DeflateSym data = 1;
inline int CompressedBlock::data_size() const {
  return data_.size();
}
inline void CompressedBlock::clear_data() {
  data_.Clear();
}
inline ::DeflateSym* CompressedBlock::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:CompressedBlock.data)
  return data_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::DeflateSym >*
CompressedBlock::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:CompressedBlock.data)
  return &data_;
}
inline const ::DeflateSym& CompressedBlock::data(int index) const {
  // @@protoc_insertion_point(field_get:CompressedBlock.data)
  return data_.Get(index);
}
inline ::DeflateSym* CompressedBlock::add_data() {
  // @@protoc_insertion_point(field_add:CompressedBlock.data)
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DeflateSym >&
CompressedBlock::data() const {
  // @@protoc_insertion_point(field_list:CompressedBlock.data)
  return data_;
}

// -------------------------------------------------------------------

// UnderlyingBlock

// .UncompressedBlock raw = 10;
inline bool UnderlyingBlock::has_raw() const {
  return data_case() == kRaw;
}
inline void UnderlyingBlock::set_has_raw() {
  _oneof_case_[0] = kRaw;
}
inline void UnderlyingBlock::clear_raw() {
  if (has_raw()) {
    delete data_.raw_;
    clear_has_data();
  }
}
inline const ::UncompressedBlock& UnderlyingBlock::_internal_raw() const {
  return *data_.raw_;
}
inline ::UncompressedBlock* UnderlyingBlock::release_raw() {
  // @@protoc_insertion_point(field_release:UnderlyingBlock.raw)
  if (has_raw()) {
    clear_has_data();
      ::UncompressedBlock* temp = data_.raw_;
    data_.raw_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::UncompressedBlock& UnderlyingBlock::raw() const {
  // @@protoc_insertion_point(field_get:UnderlyingBlock.raw)
  return has_raw()
      ? *data_.raw_
      : *reinterpret_cast< ::UncompressedBlock*>(&::_UncompressedBlock_default_instance_);
}
inline ::UncompressedBlock* UnderlyingBlock::mutable_raw() {
  if (!has_raw()) {
    clear_data();
    set_has_raw();
    data_.raw_ = CreateMaybeMessage< ::UncompressedBlock >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:UnderlyingBlock.raw)
  return data_.raw_;
}

// .CompressedBlock block = 1;
inline bool UnderlyingBlock::has_block() const {
  return data_case() == kBlock;
}
inline void UnderlyingBlock::set_has_block() {
  _oneof_case_[0] = kBlock;
}
inline void UnderlyingBlock::clear_block() {
  if (has_block()) {
    delete data_.block_;
    clear_has_data();
  }
}
inline const ::CompressedBlock& UnderlyingBlock::_internal_block() const {
  return *data_.block_;
}
inline ::CompressedBlock* UnderlyingBlock::release_block() {
  // @@protoc_insertion_point(field_release:UnderlyingBlock.block)
  if (has_block()) {
    clear_has_data();
      ::CompressedBlock* temp = data_.block_;
    data_.block_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::CompressedBlock& UnderlyingBlock::block() const {
  // @@protoc_insertion_point(field_get:UnderlyingBlock.block)
  return has_block()
      ? *data_.block_
      : *reinterpret_cast< ::CompressedBlock*>(&::_CompressedBlock_default_instance_);
}
inline ::CompressedBlock* UnderlyingBlock::mutable_block() {
  if (!has_block()) {
    clear_data();
    set_has_block();
    data_.block_ = CreateMaybeMessage< ::CompressedBlock >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:UnderlyingBlock.block)
  return data_.block_;
}

inline bool UnderlyingBlock::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void UnderlyingBlock::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline UnderlyingBlock::DataCase UnderlyingBlock::data_case() const {
  return UnderlyingBlock::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DEFLATEBlock

// bool final = 1;
inline void DEFLATEBlock::clear_final() {
  final_ = false;
}
inline bool DEFLATEBlock::final() const {
  // @@protoc_insertion_point(field_get:DEFLATEBlock.final)
  return final_;
}
inline void DEFLATEBlock::set_final(bool value) {
  
  final_ = value;
  // @@protoc_insertion_point(field_set:DEFLATEBlock.final)
}

// .UnderlyingBlock data = 2;
inline bool DEFLATEBlock::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
inline void DEFLATEBlock::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
}
inline const ::UnderlyingBlock& DEFLATEBlock::_internal_data() const {
  return *data_;
}
inline const ::UnderlyingBlock& DEFLATEBlock::data() const {
  const ::UnderlyingBlock* p = data_;
  // @@protoc_insertion_point(field_get:DEFLATEBlock.data)
  return p != NULL ? *p : *reinterpret_cast<const ::UnderlyingBlock*>(
      &::_UnderlyingBlock_default_instance_);
}
inline ::UnderlyingBlock* DEFLATEBlock::release_data() {
  // @@protoc_insertion_point(field_release:DEFLATEBlock.data)
  
  ::UnderlyingBlock* temp = data_;
  data_ = NULL;
  return temp;
}
inline ::UnderlyingBlock* DEFLATEBlock::mutable_data() {
  
  if (data_ == NULL) {
    auto* p = CreateMaybeMessage<::UnderlyingBlock>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DEFLATEBlock.data)
  return data_;
}
inline void DEFLATEBlock::set_allocated_data(::UnderlyingBlock* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete data_;
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:DEFLATEBlock.data)
}

// -------------------------------------------------------------------

// DEFLATEStream

// repeated .DEFLATEBlock blocks = 1;
inline int DEFLATEStream::blocks_size() const {
  return blocks_.size();
}
inline void DEFLATEStream::clear_blocks() {
  blocks_.Clear();
}
inline ::DEFLATEBlock* DEFLATEStream::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:DEFLATEStream.blocks)
  return blocks_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::DEFLATEBlock >*
DEFLATEStream::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:DEFLATEStream.blocks)
  return &blocks_;
}
inline const ::DEFLATEBlock& DEFLATEStream::blocks(int index) const {
  // @@protoc_insertion_point(field_get:DEFLATEStream.blocks)
  return blocks_.Get(index);
}
inline ::DEFLATEBlock* DEFLATEStream::add_blocks() {
  // @@protoc_insertion_point(field_add:DEFLATEStream.blocks)
  return blocks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DEFLATEBlock >&
DEFLATEStream::blocks() const {
  // @@protoc_insertion_point(field_list:DEFLATEStream.blocks)
  return blocks_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_deflateinfo_2eproto
